@page "/Product/Edit/{Id:int}"
@using System.Text.Json

@inject HttpClient httpClient
@inject NavigationManager navigationManager;
@inject IJSRuntime iJSRuntime
@inject SweetAlertService Swal;
@inject BlazorSpinner.SpinnerService _spinnerService
@inject BlazorSpinner.LoadingService _loadingService

<div class="container">

    <ProductEditComponent brands="brands"
                          categories="categories"
                          product="product"
                          nameBtnFormSubmit="Update"
                          onBtnSubmit="Update"
                          pageTitle="Update Product" />

</div>


@code {

    [Parameter]
    public int Id { get; set; }

    public ICollection<BrandDtoResponse>? brands { get; set; }

    public ICollection<CategoryDtoResponse>? categories { get; set; }

    public ProductDtoRequest product { get; set; } = new();

    protected override async Task OnParametersSetAsync()
    {
        var res = await httpClient.GetFromJsonAsync<ProductDtoRequest>($"api/Products/{Id}");
        if (res != null)
        {
            product = res;
        }

        Console.WriteLine("dasdasd");

        Console.WriteLine(JsonSerializer.Serialize(product));
    }


    protected override async Task OnInitializedAsync()
    {
        brands = await httpClient.GetFromJsonAsync<ICollection<BrandDtoResponse>>("api/Brands");
        categories = await httpClient.GetFromJsonAsync<ICollection<CategoryDtoResponse>>("api/Categories");

    }

    private async Task Update()
    {
        _spinnerService.Show();
        string errorBodyFor400 = string.Empty;
        try
        {
            // call the api
            HttpResponseMessage response = await httpClient.PutAsJsonAsync($"api/Products/{Id}", product);

            Console.WriteLine($"INFO Status Code= {(int)response.StatusCode}");
            if ((int)response.StatusCode == 400)
            {
                errorBodyFor400 = await response.Content.ReadAsStringAsync();
            }

            // check if response is succesfull
            response.EnsureSuccessStatusCode();

            if (response.IsSuccessStatusCode)
            {

                _spinnerService.Hide();
                await Swal.FireAsync(
                    "Updated",
                    $"Product updated ID:  {Id}",
                    SweetAlertIcon.Success
                );

                navigationManager.NavigateTo("/Product/List");

            }

        }
        catch (HttpRequestException ex) when (ex.StatusCode == System.Net.HttpStatusCode.BadRequest)
        {
            _spinnerService.Hide();
            // Maneja específicamente el error 400
            //string errorContent = await ex.Content.ReadAsStringAsync();
            string errorContent = ex.Message.ToString();
            Console.WriteLine("Bad Request: " + errorContent);

            var jsonElement = JsonSerializer.Deserialize<JsonElement>(errorBodyFor400);
            string formattedJson = JsonSerializer.Serialize(jsonElement, new JsonSerializerOptions { WriteIndented = true });
            Console.WriteLine(formattedJson);

        }
        catch (HttpRequestException ex)
        {
            _spinnerService.Hide();
            // Maneja otros errores HTTP
            Console.WriteLine($"Request error: {ex.Message}");
        }
        catch (Exception ex)
        {
            _spinnerService.Hide();
            // Maneja cualquier otro tipo de error
            Console.WriteLine($"General error: {ex.Message}");

        }

    }

}
