@page "/Brand/List"

@using ECommerceWeb.Dto.Response

@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject SweetAlertService Swal

<h3>Brands</h3>
<PageTitle>Brands</PageTitle>

<div class="Container">
    <div class="row">
        <div class="col-3">
            <NavLink href="/Brand/New/" class="btn btn-success mb-2"><i class="bi bi-plus-square me-1"></i>New Brand</NavLink>

        </div>
    </div>
    <div class="row">
        @if (brands is null)
        {
            <p>Loading <BlazorBootstrap.Spinner Class="me-3" Type="SpinnerType.Dots" Color="SpinnerColor.Primary" Visible="true" /></p>

        }
        else if (!brands.Any())
        {
            <p>Nothing for show for it <i class="bi bi-x-square"></i></p>

        }
        else
        {

            <table class="table table-primary table-bordered">
                <thead>
                    <tr class="table-primary">
                        <th>
                            ID
                        </th>
                        <th>
                            Name
                        </th>
                        <th>
                            Controls
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var brand in brands)
                    {
                        <tr class="table-secondary">
                            <td>
                                @brand.Id
                            </td>
                            <td>
                                @brand.Name
                            </td>
                            <td>
                                <button class="btn btn-success" @onclick="() => edit(brand.Id)"><i class="bi bi-pencil-square"></i></button>
                                <button class="btn btn-danger" @onclick="() => delete(brand.Id)"><Icon CustomIconName="bi bi-trash" /></button>

                            </td>
                        </tr>
                    }
                </tbody>
            </table>

        }
    </div>
</div>

@code {

    public ICollection<BrandDtoResponse>? brands { get; set; }

    protected override async Task OnInitializedAsync()
    {

        brands = await httpClient.GetFromJsonAsync<ICollection<BrandDtoResponse>>("api/brands");

    }

    private void edit(int Id)
    {
        navigationManager.NavigateTo($"/Brand/Edit/{Id}");
        

    }

    private async Task delete(int Id)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Are you sure?",
                Text = "You will delete this category!",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Yes, delete it!",
                CancelButtonText = "No, keep it"
            });

        if (result.IsConfirmed)
        {

            try
            {
                // call the api
                HttpResponseMessage response = await httpClient.DeleteAsync($"api/categories/{Id}");

                // check if response is succesfull
                response.EnsureSuccessStatusCode();
                if (response.IsSuccessStatusCode)
                {
                    brands = await httpClient.GetFromJsonAsync<ICollection<BrandDtoResponse>>("api/Brands");
                    await Swal.FireAsync(
                        "Deleted",
                        "Category has been deleted.",
                        SweetAlertIcon.Success
                    );

                }
                else
                {
                    await Swal.FireAsync(
                        "Error",
                        "Error when trying to delete the category",
                        SweetAlertIcon.Success
                    );
                }

            }
            catch (HttpRequestException ex) when (ex.StatusCode == System.Net.HttpStatusCode.BadRequest)
            {
                // Maneja específicamente el error 400
                //string errorContent = await ex.Content.ReadAsStringAsync();
                string errorContent = ex.Message.ToString();
                Console.WriteLine($"Bad Request: {errorContent}");

                await Swal.FireAsync(
                        "Error",
                        "Error when trying to delete the category",
                        SweetAlertIcon.Success
                    );

            }
            catch (HttpRequestException ex)
            {
                // Maneja otros errores HTTP
                Console.WriteLine($"Request error: {ex.Message}");

                await Swal.FireAsync(
                        "Error",
                        $"Request error: {ex.Message}",
                        SweetAlertIcon.Success
                    );
            }
            catch (Exception ex)
            {
                // Maneja cualquier otro tipo de error
                Console.WriteLine($"General error: {ex.Message}");

                await Swal.FireAsync(
                        "Error",
                        $"General error: {ex.Message}",
                        SweetAlertIcon.Success
                    );
            }

        }

    }

}
